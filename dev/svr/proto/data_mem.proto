// File:        data_mem.proto
// Description: ---
// Notes:       ---
// Author:      leoxiang <leoxiang727@qq.com>
// Revision:    2015-06-09 by leoxiang

syntax = "proto2";
import "msg_cs.proto";
import "msg_ss.proto";
import "conf_game.proto";
import "data_db.proto";
package data;


////////////////////////////////////////////////////////////
// Session
enum ENSessionState {
    SESSION_STATE_CLIENT_REQUEST       = 1;
    SESSION_STATE_SERVER_REQUEST       = 2;

    SESSION_STATE_HTTPSVR_WAIT         = 51;
    SESSION_STATE_HTTPSVR_MESSAGE      = 52;
    SESSION_STATE_HTTPSVR_TIMEOUT      = 53;

    SESSION_STATE_CURL_WAIT            = 61;
    SESSION_STATE_CURL_MESSAGE         = 62;

    SESSION_STATE_CONFSVR_WAIT         = 91;
    SESSION_STATE_CONFSVR_MESSAGE      = 92;
    SESSION_STATE_CONFSVR_TIMEOUT      = 93;

    SESSION_STATE_DBSVR_NEXT           = 20;
    SESSION_STATE_DBSVR_QUERY          = 21;
    SESSION_STATE_DBSVR_QUERY_WAIT     = 22;
    SESSION_STATE_DBSVR_QUERY_MESSAGE  = 23;
    SESSION_STATE_DBSVR_QUERY_TIMEOUT  = 24;
    SESSION_STATE_DBSVR_QUERY_SUCCESS  = 25;

    SESSION_STATE_DBSVR_UPDATE         = 31;
    SESSION_STATE_DBSVR_UPDATE_WAIT    = 32;
    SESSION_STATE_DBSVR_UPDATE_MESSAGE = 33;
    SESSION_STATE_DBSVR_UPDATE_TIMEOUT = 34;
    SESSION_STATE_DBSVR_UPDATE_SUCCESS = 35;

    SESSION_STATE_DBSVR_DELETE         = 41;
    SESSION_STATE_DBSVR_DELETE_WAIT    = 42;
    SESSION_STATE_DBSVR_DELETE_MESSAGE = 43;
    SESSION_STATE_DBSVR_DELETE_TIMEOUT = 44;
    SESSION_STATE_DBSVR_DELETE_SUCCESS = 45;

    SESSION_STATE_DBSVR_INSERT         = 71;
    SESSION_STATE_DBSVR_INSERT_WAIT    = 72;
    SESSION_STATE_DBSVR_INSERT_MESSAGE = 73;
    SESSION_STATE_DBSVR_INSERT_TIMEOUT = 74;
    SESSION_STATE_DBSVR_INSERT_SUCCESS = 75;

    SESSION_STATE_FINISH               = 1000;
}

message DBHandle {
    optional ENDataType type = 1;
    optional uint64     id   = 2;
    optional DB         data = 7;
    // for query and update
    optional bool       need_lock    = 3;
    optional bool       query_finish = 4;
    optional uint32     version      = 5;
    optional uint32     lock_id      = 6;
}

message Session {
    // base
    optional uint32         session_id    = 1;
    optional ENSessionState session_state = 2;
    optional uint64         create_time   = 3;
    optional uint32         timer_id      = 4;
    optional uint32         session_mark  = 5;

    // db handle
    repeated DBHandle db_handles       = 11;
    optional uint32   db_process_index = 13;
    optional uint32   redo_count       = 14;

    // message and data
    optional bool is_send_rsp     = 36;
    optional msg.CS	cs_request    = 31;
    optional msg.CS	cs_response   = 32;
    optional msg.SS	ss_request    = 33;
    optional msg.SS ss_response   = 34;
    optional msg.SS svr_response  = 35;

    // curl
    optional bool curl_result = 51;
    optional string curl_content = 52;
}

////////////////////////////////////////////////////////////
// Timer
enum ENTimerType {
    TIMER_TYPE_SESSION_TIMEOUT = 1;
    TIMER_TYPE_TABLE_TIMEOUT = 2;
    TIMER_TYPE_TABLE_SEAT_TIMEOUT = 3;
    TIMER_TYPE_ASYNC_INTERNAL_MESSAGE = 4;
    TIMER_TYPE_MATCH_TIMEOUT = 5;
    TIMER_TYPE_MATCH_TABLE_TIMEOUT = 6;
    TIMER_TYPE_MATCH_PLAYER_RULE_OUT = 7;
}

message Timer {
    optional uint32      timer_id            = 1;
    optional uint64      timer_milli_seconds = 2;
    optional ENTimerType timer_type          = 3;
    optional bool        is_delete           = 4;

    // info data
    optional uint32 session_id       = 20;
    optional uint32 table_id         = 21;
    optional uint32 seat_index       = 22;
    optional msg.SS internal_message = 23;
    optional uint64 match_id         = 24;
    optional uint64 player_uid       = 25;
}

////////////////////////////////////////////////////////////
// Table
message Table {
    optional uint32       table_id      = 1;
    optional conf.Table   table_conf    = 2;
}

////////////////////////////////////////////////////////////
// ClientConn
message ClientConn {
    optional msg.ConnHead conn_head = 1;
    optional uint32       table_id  = 10;
}

// vim:ts=4:sw=4:et:ft=proto:
